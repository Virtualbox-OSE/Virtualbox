# $Id: GXX64.kmk 3258 2019-01-03 05:34:09Z bird $
## @file
# kBuild Tool Config - Generic 64-bit GCC v3.2.x or later using the system GCC, for building C++ code.
#

#
# Copyright (c) 2004-2017 knut st. osmundsen <bird-kBuild-spam-xviiv@anduin.net>
#
# This file is part of kBuild.
#
# kBuild is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# kBuild is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with kBuild; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#
# As a special exception you are granted permission to include this file, via
# the kmk include directive, as you wish without this in itself causing the
# resulting makefile, program or whatever to be covered by the GPL license.
# This exception does not however invalidate any other reasons why the makefile,
# program, whatever should not be covered the GPL.
#
#

TOOL_GXX64 := Generic 64-bit GCC v3.2.x or later using the system GCC, for building C++ code. \
	More or less Linux/ELF specfic.

# Tool Specific Properties
TOOL_GXX64_CC  ?= gcc$(HOSTSUFF_EXE) -m64
TOOL_GXX64_CXX ?= g++$(HOSTSUFF_EXE) -m64
TOOL_GXX64_PCH ?= $(TOOL_GXX64_CXX)
TOOL_GXX64_AS  ?= gcc$(HOSTSUFF_EXE) -m64
TOOL_GXX64_AR  ?= ar$(HOSTSUFF_EXE)
TOOL_GXX64_LD  ?= g++$(HOSTSUFF_EXE) -m64
TOOL_GXX64_LD_SYSMOD ?= ld$(HOSTSUFF_EXE)
ifndef TOOL_GXX64_LDFLAGS.$(KBUILD_TARGET)
TOOL_GXX64_LDFLAGS.dll ?= -shared
else
TOOL_GXX64_LDFLAGS.dll ?= $(TOOL_GXX64_LDFLAGS.$(KBUILD_TARGET))
endif
TOOL_GXX64_LDFLAGS.sysmod ?= -r -m elf_x86_64$(if-expr "$(KBUILD_TARGET)" == "freebsd" || "$(KBUILD_TARGET)" == "gnukfbsd",_fbsd,)
TOOL_GXX64_LD_SONAME ?= -Wl,-soname=$(firstword $($(1)_SONAME.$(KBUILD_TARGET).$(KBUILD_TYPE)) $($(1)_SONAME.$(KBUILD_TARGET)) $($(1)_SONAME.$(KBUILD_TYPE)) $($(1)_SONAME) $(notdir $(2)))
ifeq ($(KBUILD_TARGET),os2)
TOOL_GXX64_LD_MAP ?= -Zmap=$(1)
else
TOOL_GXX64_LD_MAP ?=
endif
ifeq ($(KBUILD_TARGET),os2)
TOOL_GXX64_LD_SYSMOD_MAP ?= -Zmap=$(1)
else
TOOL_GXX64_LD_SYSMOD_MAP ?=
endif
if1of ($(KBUILD_HOST), solaris)
 TOOL_GXX64_OBJCOPY ?= gobjcopy$(HOSTSUFF_EXE)
else
 TOOL_GXX64_OBJCOPY ?= objcopy$(HOSTSUFF_EXE)
endif

ifdef SLKRUNS
 TOOL_GXX64_CC  += -fmessage-length=0
 TOOL_GXX64_CXX += -fmessage-length=0
endif

# General Properties used by kBuild
TOOL_GXX64_COBJSUFF         ?= .o
TOOL_GXX64_CFLAGS           ?=
TOOL_GXX64_CFLAGS.debug     ?= -g
TOOL_GXX64_CFLAGS.profile   ?= -O2 #-g -pg
TOOL_GXX64_CFLAGS.release   ?= -O2
TOOL_GXX64_CINCS            ?=
TOOL_GXX64_CDEFS            ?=

TOOL_GXX64_CXXOBJSUFF       ?= .o
TOOL_GXX64_CXXFLAGS         ?=
TOOL_GXX64_CXXFLAGS.debug   ?= -g
TOOL_GXX64_CXXFLAGS.profile ?= -O2 #-g -pg
TOOL_GXX64_CXXFLAGS.release ?= -O2
TOOL_GXX64_CXXINCS          ?=
TOOL_GXX64_CXXDEFS          ?=

TOOL_GXX64_PCHOBJSUFF       ?= .h.gch
TOOL_GXX64_PCHFLAGS         ?= $(TOOL_GXX64_CXXFLAGS)
TOOL_GXX64_PCHFLAGS.debug   ?= $(TOOL_GXX64_CXXFLAGS.debug)
TOOL_GXX64_PCHFLAGS.profile ?= $(TOOL_GXX64_CXXFLAGS.profile)
TOOL_GXX64_PCHFLAGS.release ?= $(TOOL_GXX64_CXXFLAGS.release)
TOOL_GXX64_PCHINCS          ?= $(TOOL_GXX64_CXXINCS)
TOOL_GXX64_PCHDEFS          ?= $(TOOL_GXX64_CXXDEFS)

TOOL_GXX64_ASFLAGS          ?= -x assembler-with-cpp
TOOL_GXX64_ASFLAGS.debug    ?= -g
TOOL_GXX64_ASFLAGS.profile  ?= -g
TOOL_GXX64_ASOBJSUFF        ?= .o

TOOL_GXX64_ARFLAGS          ?= cr
TOOL_GXX64_ARLIBSUFF        ?= .a

TOOL_GXX64_LDFLAGS          ?=
TOOL_GXX64_LDFLAGS.debug    ?= -g
TOOL_GXX64_LDFLAGS.profile  ?= -g


## Compile C source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param    $(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)	    Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)		Other dependencies.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param    $(objsuff)  Object suffix.
TOOL_GXX64_COMPILE_C_DEPEND =
TOOL_GXX64_COMPILE_C_DEPORD =
TOOL_GXX64_COMPILE_C_OUTPUT         = $(if-expr "$(use_objcache)" != "",$(outbase).i,)
TOOL_GXX64_COMPILE_C_USES_KOBJCACHE = $(if-expr "$(use_objcache)" != "",1,)
define TOOL_GXX64_COMPILE_C_CMDS
if "$(use_objcache)" != ""
	$(QUIET)$(KOBJCACHE) -f $(outbase).koc -d $(PATH_OBJCACHE) -t $(bld_trg).$(bld_trg_arch) -p\
		--kObjCache-cpp $(outbase).i\
		$(TOOL_GXX64_CC) -E -o -\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		-Wp,-MD,$(dep) -Wp,-MT,$(obj) -Wp,-MP\
		$(abspath $(source))\
		--kObjCache-cc $(obj)\
		$(TOOL_GXX64_CC) -c\
		$(flags) -fpreprocessed -x c\
		-o $(obj)\
		-
else
	$(QUIET)$(TOOL_GXX64_CC) -c\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		-Wp,-MD,$(dep) -Wp,-MT,$(obj) -Wp,-MP\
		-o $(obj)\
		$(abspath $(source))
endif
	$(QUIET)$(APPEND) -n "$(dep)" "" "$(source):" ""
endef


## Compile C++ source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param    $(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)      Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)     Other dependencies.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param    $(objsuff)  Object suffix.
TOOL_GXX64_COMPILE_CXX_OUTPUT         = $(if-expr "$(use_objcache)" != "",$(outbase).ii,)
TOOL_GXX64_COMPILE_CXX_DEPEND         = $($(target)_1_GCC_PCH_FILE)
TOOL_GXX64_COMPILE_CXX_DEPORD         =
TOOL_GXX64_COMPILE_CXX_USES_KOBJCACHE = $(if-expr "$(use_objcache)" != "",1,)
define TOOL_GXX64_COMPILE_CXX_CMDS
if "$(use_objcache)" != ""
	$(QUIET)$(KOBJCACHE) -f $(outbase).koc -d $(PATH_OBJCACHE) -t $(bld_trg).$(bld_trg_arch) -p\
		--kObjCache-cpp $(outbase).ii\
		$(TOOL_GXX64_CXX) -E -o - $(if-expr defined($(target)_PCH_HDR)\
		,-fpch-preprocess -Winvalid-pch -I$($(target)_1_GCC_PCH_DIR) -include $(basename $($(target)_1_GCC_PCH_FILE)),)\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		-Wp,-MD,$(dep) -Wp,-MT,$(obj) -Wp,-MP\
		$(abspath $(source))\
		--kObjCache-cc $(obj)\
		$(TOOL_GXX64_CXX) -c\
		$(flags) -fpreprocessed $(if-expr defined($(target)_PCH_HDR),-fpch-preprocess,) -x c++\
		-o $(obj)\
		-
else
	$(QUIET)$(TOOL_GXX64_CXX) -c\
		$(flags) $(addprefix -I, $($(target)_1_GCC_PCH_DIR) $(incs)) $(addprefix -D, $(defs))\
		-Wp,-MD,$(dep) -Wp,-MT,$(obj) -Wp,-MP\
		-o $(obj) $(if-expr defined($(target)_PCH_HDR) \
		,-Winvalid-pch -include $(basename $($(target)_1_GCC_PCH_FILE)),) \
		$(abspath $(source))
endif
	$(QUIET)$(APPEND) -n "$(dep)" "" "$(source):" ""
endef


## Precompile C++ header.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param    $(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)	    Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)		Other dependencies.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param    $(objsuff)  Object suffix.
TOOL_GXX64_COMPILE_PCH_OUTPUT = $($(target)_1_GCC_PCH_FILE)
TOOL_GXX64_COMPILE_PCH_DEPEND =
TOOL_GXX64_COMPILE_PCH_DEPORD = $($(target)_1_GCC_PCH_DIR)
define TOOL_GXX64_COMPILE_PCH_CMDS
	$(QUIET)$(TOOL_GXX64_PCH) -c\
		$(flags) $(addprefix -I, $($(target)_1_GCC_PCH_DIR) $(incs)) $(addprefix -D, $(defs))\
		-Wp,-MD,$(dep) -Wp,-MT,$(obj) -Wp,-MP\
		-o $(obj)\
		$(abspath $(source))
	$(INSTALL) --hard-link-files-when-possible -m 0644 -- "$(obj)" "$($(target)_1_GCC_PCH_FILE)"
	$(QUIET)$(APPEND) -n "$(dep)" "" "$(source):" ""
endef


## Compile Assembly source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param    $(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)      Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)     Other dependencies.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param    $(objsuff)  Object suffix.
#
TOOL_GXX64_COMPILE_AS_OUTPUT =
TOOL_GXX64_COMPILE_AS_DEPEND =
TOOL_GXX64_COMPILE_AS_DEPORD =
define TOOL_GXX64_COMPILE_AS_CMDS
	$(QUIET)$(TOOL_GXX64_AS) -c\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		-Wp,-MD,$(dep) -Wp,-MT,$(obj) -Wp,-MP\
		-o $(obj)\
		$(abspath $(source))
	$(QUIET)$(APPEND) -n "$(dep)" "" "$(source):" ""
endef


## Link library
# @param    $(target)   Normalized main target name.
# @param    $(out)		Library name.
# @param    $(objs)     Object files to put in the library.
# @param    $(flags)    Flags.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)		Other dependencies.
# @param    $(othersrc) Unhandled sources.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
TOOL_GXX64_LINK_LIBRARY_OUTPUT = $(out).ar-script
TOOL_GXX64_LINK_LIBRARY_DEPEND = $(othersrc)
TOOL_GXX64_LINK_LIBRARY_DEPORD =
define TOOL_GXX64_LINK_LIBRARY_CMDS
	$(QUIET)$(APPEND) $(out).ar-script 'CREATE $(out)'
	$(QUIET)$(APPEND) -n $(out).ar-script \
		$(foreach o,$(filter-out %.h.gch,$(objs)), 'ADDMOD $(o)') \
		$(foreach o,$(othersrc), 'ADDLIB $(o)')
	$(QUIET)$(APPEND) $(out).ar-script 'SAVE'
	$(QUIET)$(APPEND) $(out).ar-script 'END'
	$(QUIET)$(REDIRECT) -rti $(out).ar-script -- $(TOOL_GXX64_AR) -M
endef


## Link program
# @param    $(target)   Normalized main target name.
# @param    $(out)		Program name.
# @param    $(objs)     Object files to link together.
# @param    $(libs)     Libraries to search.
# @param    $(libpath)  Library search paths.
# @param    $(flags)    Flags.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)		Other dependencies.
# @param    $(othersrc) Unhandled sources.
# @param    $(custom_pre)   Custom step invoked before linking.
# @param    $(custom_post)  Custom step invoked after linking.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
TOOL_GXX64_LINK_PROGRAM_OUTPUT =
TOOL_GXX64_LINK_PROGRAM_OUTPUT_MAYBE = $(outbase).map
TOOL_GXX64_LINK_PROGRAM_OUTPUT_DEBUG = $(outbase).debug
TOOL_GXX64_LINK_PROGRAM_DEBUG_INSTALL_FN = $(2).debug=>$(basename $(3)).debug
TOOL_GXX64_LINK_PROGRAM_DEPEND = $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib)))
TOOL_GXX64_LINK_PROGRAM_DEPORD =
define TOOL_GXX64_LINK_PROGRAM_CMDS
	$(QUIET)$(TOOL_GXX64_LD) $(flags) -o $(out) $(filter-out %.h.gch,$(objs))\
		$(foreach p,$(libpath), -L$(p))\
		$(foreach lib,$(libs), $(if $(findstring $(lib),$(subst /,x,$(lib))), -l$(patsubst lib%,%,$(lib)), $(lib)))\
		$(call TOOL_GXX64_LD_MAP,$(outbase).map)
 ifeq ($(ld_debug),split)
	$(QUIET)$(TOOL_GXX64_OBJCOPY) --only-keep-debug $(out) $(outbase).debug
	$(QUIET)$(CHMOD) a-x $(outbase).debug
	$(QUIET)$(TOOL_GXX64_OBJCOPY) --strip-debug --strip-unneeded --add-gnu-debuglink=$(outbase).debug $(out)
 endif
endef


## Link DLL
# @param    $(target)   Normalized main target name.
# @param    $(out)		Program name.
# @param    $(objs)     Object files to link together.
# @param    $(libs)     Libraries to search.
# @param    $(libpath)  Library search paths.
# @param    $(flags)    Flags.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)		Other dependencies.
# @param    $(othersrc) Unhandled sources.
# @param    $(custom_pre)   Custom step invoked before linking.
# @param    $(custom_post)  Custom step invoked after linking.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
TOOL_GXX64_LINK_DLL_OUTPUT =
TOOL_GXX64_LINK_DLL_OUTPUT_MAYBE = $(outbase).map
TOOL_GXX64_LINK_DLL_OUTPUT_DEBUG = $(outbase).debug
TOOL_GXX64_LINK_DLL_DEBUG_INSTALL_FN = $(2).debug=>$(basename $(3)).debug
TOOL_GXX64_LINK_DLL_DEPEND = $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib)))
TOOL_GXX64_LINK_DLL_DEPORD =
define TOOL_GXX64_LINK_DLL_CMDS
	$(QUIET)$(TOOL_GXX64_LD) $(TOOL_GXX64_LDFLAGS.dll) $(flags) -o $(out)\
		$(if $(filter-out win os2, $(KBUILD_TARGET)),$(call TOOL_GXX64_LD_SONAME,$(target),$(out)))\
		$(filter-out %.h.gch,$(objs))\
		$(foreach p,$(libpath), -L$(p))\
		$(foreach lib,$(libs), $(if $(findstring $(lib),$(subst /,x,$(lib))), -l$(patsubst lib%,%,$(lib)), $(lib)))\
		$(call TOOL_GXX64_LD_MAP,$(outbase).map)
 ifeq ($(ld_debug),split)
	$(QUIET)$(TOOL_GXX64_OBJCOPY) --only-keep-debug $(out) $(outbase).debug
	$(QUIET)$(CHMOD) a-x $(outbase).debug
	$(QUIET)$(TOOL_GXX64_OBJCOPY) --strip-debug --strip-unneeded --add-gnu-debuglink=$(outbase).debug $(out)
 endif
endef


## Link system module (windows aka driver, linux aka kernel module)
# @param    $(target)   Normalized main target name.
# @param    $(out)		System module name.
# @param    $(objs)     Object files to link together.
# @param    $(libs)     Libraries to search.
# @param    $(libpath)  Library search paths.
# @param    $(flags)    Flags.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)		Other dependencies.
# @param    $(othersrc) Unhandled sources.
# @param    $(custom_pre)   Custom step invoked before linking.
# @param    $(custom_post)  Custom step invoked after linking.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
TOOL_GXX64_LINK_SYSMOD_OUTPUT =
TOOL_GXX64_LINK_SYSMOD_OUTPUT_MAYBE = $(outbase).map
TOOL_GXX64_LINK_SYSMOD_OUTPUT_DEBUG = $(outbase).debug
TOOL_GXX64_LINK_SYSMOD_DEBUG_INSTALL_FN = $(2).debug=>$(basename $(3)).debug
TOOL_GXX64_LINK_SYSMOD_DEPEND = $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib)))
TOOL_GXX64_LINK_SYSMOD_DEPORD =
define TOOL_GXX64_LINK_SYSMOD_CMDS
	$(QUIET)$(TOOL_GXX64_LD_SYSMOD) $(TOOL_GXX64_LDFLAGS.sysmod) $(flags) -o $(out) $(filter-out %.h.gch,$(objs))\
		$(foreach p,$(libpath), -L$(p))\
		$(foreach lib,$(libs), $(if $(findstring $(lib),$(subst /,x,$(lib))), -l$(patsubst lib%,%,$(lib)), $(lib)))\
		$(call TOOL_GXX64_LD_SYSMOD_MAP,$(outbase).map)
 ifeq ($(ld_debug),split)
	$(QUIET)$(TOOL_GXX64_OBJCOPY) --only-keep-debug $(out) $(outbase).debug
	$(QUIET)$(CHMOD) a-x $(outbase).debug
	$(QUIET)$(TOOL_GXX64_OBJCOPY) --strip-debug --strip-unneeded --add-gnu-debuglink=$(outbase).debug $(out)
 endif
endef

