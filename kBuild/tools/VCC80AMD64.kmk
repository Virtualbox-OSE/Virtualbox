# $Id: VCC80AMD64.kmk 3121 2017-10-31 10:58:59Z bird $
## @file
# kBuild Tool Config - Visual C++ 8.0 (aka Visual .NET 2005, or MSC v14), targeting AMD64.
#

#
# Copyright (c) 2004-2017 knut st. osmundsen <bird-kBuild-spam-xviiv@anduin.net>
#
# This file is part of kBuild.
#
# kBuild is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# kBuild is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with kBuild; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#
# As a special exception you are granted permission to include this file, via
# the kmk include directive, as you wish without this in itself causing the
# resulting makefile, program or whatever to be covered by the GPL license.
# This exception does not however invalidate any other reasons why the makefile,
# program, whatever should not be covered the GPL.
#
#

TOOL_VCC80AMD64 := Visual C++ 8.0 (aka Visual .NET 2005, or MSC v14), targeting AMD64.

# Tool Specific Properties
ifndef PATH_TOOL_VCC80AMD64
 PATH_TOOL_VCC80AMD64 := $(wildcard $(KBUILD_DEVTOOLS)/win.x86/vcc/v8*)
 ifeq ($(PATH_TOOL_VCC80AMD64),)
  PATH_TOOL_VCC80AMD64 := $(PATH_TOOL_VCC80)
 endif
 ifeq ($(PATH_TOOL_VCC80AMD64),)
  PATH_TOOL_VCC80AMD64 := $(PATH_TOOL_VCC80X86)
 endif
 ifeq ($(PATH_TOOL_VCC80AMD64),)
  PATH_TOOL_VCC80AMD64 := $(wildcard $(KBUILD_DEVTOOLS)/win.x86/vcc/v8*)
 endif
 ifneq ($(PATH_TOOL_VCC80AMD64),)
  PATH_TOOL_VCC80AMD64 := $(lastword $(sort $(PATH_TOOL_VCC80AMD64)))
 else
  $(warning kBuild: PATH_TOOL_VCC80AMD64 cannot be determined!)
  PATH_TOOL_VCC80AMD64 := $(KBUILD_DEVTOOLS)/win.x86/vcc/v8
 endif
else
 # Resolve any fancy stuff once and for all.
 PATH_TOOL_VCC80AMD64 := $(PATH_TOOL_VCC80AMD64)
endif
ifeq ($(KBUILD_HOST).$(KBUILD_HOST_ARCH),win.amd64)
PATH_TOOL_VCC80AMD64_BIN ?= $(PATH_TOOL_VCC80AMD64)/bin/amd64
else
PATH_TOOL_VCC80AMD64_BIN ?= $(PATH_TOOL_VCC80AMD64)/bin/x86_amd64
endif
PATH_TOOL_VCC80AMD64_LIB ?= $(PATH_TOOL_VCC80AMD64)/lib/amd64
PATH_TOOL_VCC80AMD64_INC ?= $(PATH_TOOL_VCC80AMD64)/include
PATH_TOOL_VCC80AMD64_ATLMFC ?= $(PATH_TOOL_VCC80AMD64)/atlmfc
PATH_TOOL_VCC80AMD64_ATLMFC_INC ?= $(PATH_TOOL_VCC80AMD64_ATLMFC)/include
PATH_TOOL_VCC80AMD64_ATLMFC_LIB ?= $(PATH_TOOL_VCC80AMD64_ATLMFC)/lib/amd64
TOOL_VCC80AMD64_CC  ?= $(EXEC_X86_WIN32) $(PATH_TOOL_VCC80AMD64_BIN)/cl.exe
TOOL_VCC80AMD64_CXX ?= $(EXEC_X86_WIN32) $(PATH_TOOL_VCC80AMD64_BIN)/cl.exe
TOOL_VCC80AMD64_AS  ?= $(EXEC_X86_WIN32) $(PATH_TOOL_VCC80AMD64_BIN)/ml64.exe
TOOL_VCC80AMD64_RC  ?= $(EXEC_X86_WIN32) $(PATH_TOOL_VCC80AMD64_BIN)/../rc.exe
TOOL_VCC80AMD64_AR  ?= $(EXEC_X86_WIN32) $(PATH_TOOL_VCC80AMD64_BIN)/lib.exe
TOOL_VCC80AMD64_LD  ?= $(EXEC_X86_WIN32) $(PATH_TOOL_VCC80AMD64_BIN)/link.exe
TOOL_VCC80AMD64_MT  ?= $(EXEC_X86_WIN32) $(PATH_TOOL_VCC80AMD64_BIN)/../mt.exe
## Disabled fast DEP_IDB based dependencies.
#VCC80AMD64_OLD_DEPS = 1

## Constructs the correct .pdb name (the name is lowercased).
# @param    $(1)        Base name, no extention.
# @param    $(2)        The extension.
TOOL_VCC80AMD64_PDB = $(dir $(1))$(tolower $(notdir $(1))).$(2)

TOOL_VCC80AMD64_COBJSUFF         ?= .obj
TOOL_VCC80AMD64_CFLAGS           ?= -TC -c -nologo
TOOL_VCC80AMD64_CFLAGS.debug     ?= -Od -Zi
TOOL_VCC80AMD64_CFLAGS.release   ?= -O2
TOOL_VCC80AMD64_CFLAGS.profile   ?= -O2
TOOL_VCC80AMD64_CINCS            ?= $(PATH_TOOL_VCC80AMD64_INC)
TOOL_VCC80AMD64_CDEFS            ?=

TOOL_VCC80AMD64_CXXOBJSUFF       ?= .obj
TOOL_VCC80AMD64_CXXFLAGS         ?= -TP -c -nologo
TOOL_VCC80AMD64_CXXFLAGS.debug   ?= -Od -Zi
TOOL_VCC80AMD64_CXXFLAGS.release ?= -O2
TOOL_VCC80AMD64_CXXFLAGS.profile ?= -O2
TOOL_VCC80AMD64_CXXINCS          ?= $(PATH_TOOL_VCC80AMD64_INC) $(PATH_TOOL_VCC80AMD64_ATLMFC_INC)
TOOL_VCC80AMD64_CXXDEFS          ?=

TOOL_VCC80AMD64_ASOBJSUFF        ?= .obj

TOOL_VCC80AMD64_RCOBJSUFF        ?= .res
TOOL_VCC80AMD64_RCINCS           ?= $(PATH_TOOL_VCC80AMD64_INC) $(PATH_TOOL_VCC80AMD64_ATLMFC_INC)

TOOL_VCC80AMD64_ARFLAGS          ?= -nologo -machine:amd64
TOOL_VCC80AMD64_ARLIBSUFF        ?= .lib

TOOL_VCC80AMD64_LDFLAGS          ?= -nologo -machine:amd64
TOOL_VCC80AMD64_LDFLAGS.debug    ?= -debug
TOOL_VCC80AMD64_LDFLAGS.release  ?=



## Compile C source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param    $(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)      Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)     Other dependencies.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param    $(objsuff)  Object suffix.
TOOL_VCC80AMD64_COMPILE_C_DEPEND =
TOOL_VCC80AMD64_COMPILE_C_DEPORD =
TOOL_VCC80AMD64_COMPILE_C_OUTPUT = $(call TOOL_VCC80AMD64_PDB, $(outbase)-obj,idb)
TOOL_VCC80AMD64_COMPILE_C_OUTPUT_MAYBE = $(call TOOL_VCC80AMD64_PDB, $(outbase)-obj,pdb)
define TOOL_VCC80AMD64_COMPILE_C_CMDS
	$(QUIET)$(TOOL_VCC80AMD64_CC) -c\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		-Fd$(outbase)-obj.pdb \
		-FD\
		-Fo$(obj)\
		$(subst /,\\,$(abspath $(source)))
	$(QUIET)$(DEP_IDB) -f -s -q -o $(dep) -t $(obj) $(call TOOL_VCC80AMD64_PDB,$(outbase)-obj,idb)
endef


## Compile C++ source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param    $(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)      Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)     Other dependencies.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param    $(objsuff)  Object suffix.
TOOL_VCC80AMD64_COMPILE_CXX_DEPEND =
TOOL_VCC80AMD64_COMPILE_CXX_DEPORD =
TOOL_VCC80AMD64_COMPILE_CXX_OUTPUT = $(call TOOL_VCC80AMD64_PDB, $(outbase)-obj,idb)
TOOL_VCC80AMD64_COMPILE_CXX_OUTPUT_MAYBE = $(call TOOL_VCC80AMD64_PDB, $(outbase)-obj,pdb)
define TOOL_VCC80AMD64_COMPILE_CXX_CMDS
	$(QUIET)$(TOOL_VCC80AMD64_CXX) -c\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		-Fd$(outbase)-obj.pdb \
		-FD\
		-Fo$(obj)\
		$(subst /,\\,$(abspath $(source)))
	$(QUIET)$(DEP_IDB) -f -s -q -o $(dep) -t $(obj) $(call TOOL_VCC80AMD64_PDB,$(outbase)-obj,idb)
endef


## Compile resource source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param    $(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)      Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)     Other dependencies.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param    $(objsuff)  Object suffix.
TOOL_VCC80AMD64_COMPILE_RC_DEPEND =
TOOL_VCC80AMD64_COMPILE_RC_DEPORD =
TOOL_VCC80AMD64_COMPILE_RC_OUTPUT =
define TOOL_VCC80AMD64_COMPILE_RC_CMDS
	$(QUIET)$(TOOL_VCC80AMD64_RC) \
		$(flags) $(addprefix /i, $(subst /,\\,$(incs))) $(addprefix /d, $(defs))\
		/fo$(obj)\
		$(subst /,\\,$(abspath $(source)))
endef


## Link library
# @param    $(target)   Normalized main target name.
# @param    $(out)      Library name.
# @param    $(objs)     Object files to put in the library.
# @param    $(flags)    Flags.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)     Other dependencies.
# @param    $(othersrc) Unhandled sources.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
#
TOOL_VCC80AMD64_LINK_LIBRARY_DEPEND = $(othersrc)
TOOL_VCC80AMD64_LINK_LIBRARY_DEPORD =
TOOL_VCC80AMD64_LINK_LIBRARY_OUTPUT = $(outbase).rsp
TOOL_VCC80AMD64_LINK_LIBRARY_OUTPUT_MAYBE = $(outbase).lst $(outbase).exp $(outbase).pdb
define TOOL_VCC80AMD64_LINK_LIBRARY_CMDS
	$(QUIET)$(APPEND) -tn $(outbase).rsp \
		$(foreach arg,\
			$(subst /,\\,$(objs) \
			$(filter-out %.def,$(othersrc))) \
			$(addprefix /DEF:,$(filter %.def,$(othersrc))) \
			,\"$(arg)\")
	$(QUIET)$(TOOL_VCC80AMD64_AR) $(flags) /OUT:$(out) @$(outbase).rsp
endef


## Link program
# @param    $(target)       Normalized main target name.
# @param    $(out)          Program name.
# @param    $(objs)         Object files to link together.
# @param    $(libs)         Libraries to search.
# @param    $(libpath)      Library search paths.
# @param    $(flags)        Flags.
# @param    $(dirdep)       Directory creation dependency.
# @param    $(deps)         Other dependencies.
# @param    $(othersrc)     Unhandled sources.
# @param    $(custom_pre)   Custom step invoked before linking.
# @param    $(custom_post)  Custom step invoked after linking.
# @param    $(outbase)      Output basename (full). Use this for list files and such.
#
TOOL_VCC80AMD64_LINK_PROGRAM_DEPEND = $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib))) $(othersrc)
TOOL_VCC80AMD64_LINK_PROGRAM_DEPORD =
TOOL_VCC80AMD64_LINK_PROGRAM_OUTPUT = $(outbase).map $(outbase).rsp
TOOL_VCC80AMD64_LINK_PROGRAM_OUTPUT_MAYBE = $(outbase).lib $(outbase).exp $(outbase).ilk $(out).manifest
TOOL_VCC80AMD64_LINK_PROGRAM_OUTPUT_DEBUG = $(outbase).pdb
TOOL_VCC80AMD64_LINK_PROGRAM_DEBUG_INSTALL_FN = $(2).pdb=>$(basename $(3)).pdb
define TOOL_VCC80AMD64_LINK_PROGRAM_CMDS
	$(QUIET)$(APPEND) -tn $(outbase).rsp \
		$(foreach arg,\
		    $(subst /,\\,$(objs)) \
		    $(subst /,\\,$(libs)) \
			,\"$(arg)\")
	$(QUIET)$(TOOL_VCC80AMD64_LD) $(flags) \
		/OUT:$(out) \
		/MAPINFO:EXPORTS /INCREMENTAL:NO \
		/MAP:$(outbase).map \
		$(foreach def,$(filter %.def,$(othersrc)), /DEF:$(def)) \
		$(subst /,\\,$(filter %.exp %.res,$(othersrc))) \
		$(foreach p,$(libpath), /LIBPATH:$(p)) \
        @$(outbase).rsp
	$(QUIET)$(TEST) -f $(out).manifest -- \
		$(TOOL_VCC80AMD64_MT) -manifest $(subst /,\\,$(out)).manifest -outputresource:$(subst /,\\,$(out))
endef


## Link DLL.
# @param    $(target)   Normalized main target name.
# @param    $(out)      DLL name.
# @param    $(objs)     Object files to link together.
# @param    $(libs)     Libraries to search.
# @param    $(libpath)  Library search paths.
# @param    $(flags)    Flags.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)     Other dependencies.
# @param    $(othersrc)     Unhandled sources.
# @param    $(custom_pre)   Custom step invoked before linking.
# @param    $(custom_post)  Custom step invoked after linking.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
TOOL_VCC80AMD64_LINK_DLL_DEPEND = $(objs) $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib))) $(othersrc)
TOOL_VCC80AMD64_LINK_DLL_DEPORD = $(call DIRDEP,$(PATH_STAGE_LIB))
TOOL_VCC80AMD64_LINK_DLL_OUTPUT = $(outbase).map $(outbase).lib $(outbase).exp $(outbase).rsp
TOOL_VCC80AMD64_LINK_DLL_OUTPUT_MAYBE = $(outbase).ilk $(out).manifest $(PATH_STAGE_LIB)/$(notdir $(outbase)).lib $(PATH_STAGE_LIB)/$(notdir $(outbase)).exp
TOOL_VCC80AMD64_LINK_DLL_OUTPUT_DEBUG = $(outbase).pdb
TOOL_VCC80AMD64_LINK_DLL_DEBUG_INSTALL_FN = $(2).pdb=>$(basename $(3)).pdb
define TOOL_VCC80AMD64_LINK_DLL_CMDS
	$(QUIET)$(APPEND) -tn $(outbase).rsp \
		$(foreach arg,\
		    $(subst /,\\,$(objs)) \
		    $(subst /,\\,$(libs)) \
			,\"$(arg)\")
	$(QUIET)$(TOOL_VCC80AMD64_LD) $(flags) \
		/OUT:$(out) \
		/IMPLIB:$(outbase).lib \
		/MAPINFO:EXPORTS /INCREMENTAL:NO \
		/MAP:$(outbase).map \
		/DLL \
		$(foreach def,$(filter %.def,$(othersrc)), /DEF:$(def)) \
		$(subst /,\\,$(filter %.exp %.res,$(othersrc))) \
		$(foreach p,$(libpath), /LIBPATH:$(p)) \
        @$(outbase).rsp
	$(QUIET)$(TEST) -f $(out).manifest -- \
		$(TOOL_VCC80AMD64_MT) -manifest $(subst /,\\,$(out)).manifest '-outputresource:$(subst /,\\,$(out));#2'
	$(QUIET)$(CP) --changed --ignore-non-existing $(outbase).exp $(outbase).lib $(PATH_STAGE_LIB)/
$(eval _DIRS += $(PATH_STAGE_LIB))
endef


## Link system module (windows aka driver, linux aka kernel module)
# @param    $(target)       Normalized main target name.
# @param    $(out)          System module name.
# @param    $(objs)         Object files to link together.
# @param    $(libs)         Libraries to search.
# @param    $(libpath)      Library search paths.
# @param    $(flags)        Flags.
# @param    $(dirdep)       Directory creation dependency.
# @param    $(deps)         Other dependencies.
# @param    $(othersrc)     Unhandled sources.
# @param    $(custom_pre)   Custom step invoked before linking.
# @param    $(custom_post)  Custom step invoked after linking.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
TOOL_VCC80AMD64_LINK_SYSMOD_DEPEND = $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib))) $(othersrc)
TOOL_VCC80AMD64_LINK_SYSMOD_DEPORD =
TOOL_VCC80AMD64_LINK_SYSMOD_OUTPUT = $(outbase).map $(outbase).rsp
TOOL_VCC80AMD64_LINK_SYSMOD_OUTPUT_MAYBE = $(outbase).lib $(outbase).exp $(outbase).ilk $(out).manifest
TOOL_VCC80AMD64_LINK_SYSMOD_OUTPUT_DEBUG = $(outbase).pdb
TOOL_VCC80AMD64_LINK_SYSMOD_DEBUG_INSTALL_FN = $(2).pdb=>$(basename $(3)).pdb
define TOOL_VCC80AMD64_LINK_SYSMOD_CMDS
	$(QUIET)$(APPEND) -tn $(outbase).rsp \
		$(foreach arg,\
		    $(subst /,\\,$(objs)) \
		    $(subst /,\\,$(libs)) \
			,\"$(arg)\")
	$(QUIET)$(TOOL_VCC80AMD64_LD) $(flags) \
		/OUT:$(out) \
		/MAPINFO:EXPORTS /INCREMENTAL:NO \
		/MAP:$(outbase).map \
		$(foreach def,$(filter %.def,$(othersrc)), /DEF:$(def)) \
		$(subst /,\\,$(filter %.exp %.res,$(othersrc))) \
		$(foreach p,$(libpath), /LIBPATH:$(p)) \
        @$(outbase).rsp
	$(QUIET)$(TEST) -f $(out).manifest -- \
		$(TOOL_VCC80AMD64_MT) -manifest $(subst /,\\,$(out)).manifest '-outputresource:$(subst /,\\,$(out));#2'
endef

